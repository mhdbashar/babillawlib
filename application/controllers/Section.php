<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Section extends Front_end{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Section_model');
    } 

    /*
     * Listing of section
     */
    function index()
    {
        $data['section'] = $this->Section_model->get_parent_name();
        
        $this->layout->view('section/index',$data);
    }

    /*
     * Adding a new section
     */
    function add()
    {   
        if(isset($_POST) && count($_POST) > 0)     
        {   
            $params = array(
				'section_name' => $this->input->post('section_name'),
				'parent_id' => $this->input->post('parent_section_id'),
				
            );
            
            $section_id = $this->Section_model->add_section($params);
            redirect('section/index');
        }
        else
        {            
           $data['get_all_section']=$this->Section_model->get_all_section();
             $this->layout->view('section/add',$data);
        }
    }  

    /*
     * Editing a section
     */
    function edit($section_id)
    {   
        // check if the section exists before trying to edit it
        $data['section'] = $this->Section_model->get_section($section_id);
        
        if(isset($data['section']['section_id']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $params = array(
				'section_name' => $this->input->post('section_name'),
				'parent_id' => $this->input->post('parent_section_id'),
				
            );

                $this->Section_model->update_section($section_id,$params);            
                redirect('section/index');
            }
            else
            {
              $data['get_all_section']=$this->Section_model->get_all_section();
               $this->layout->view('section/edit',$data);
            }
        }
        else
            show_error('The section you are trying to edit does not exist.');
    } 

    /*
     * Deleting section
     */
    function remove($section_id)
    {
        $section = $this->Section_model->get_section($section_id);

        // check if the section exists before trying to delete it
        if(isset($section['section_id']))
        {
            $this->Section_model->delete_section($section_id);
            redirect('section/index');
        }
        else
            show_error('The section you are trying to delete does not exist.');
    }
    
    public function getItem($parent_key = '0')
    {
          $data = [];
          
          $row = $this->db->query('SELECT section_id, section_name from section');
            
          if($row->num_rows() > 0)
          {
              $data = $this->membersTree($parent_key);
              
          }else{
              $data=["section_id"=>"0","section_name"=>"No Members presnt in list","text"=>"No Members is presnt in list","nodes"=>[]];
          }
          $sql="select * from section where parent_id !=0 and section_id  not in (select parent_id from section)";
          $query=$this->db->query($sql);
          $data['result']=$query->result();
   
          echo json_encode($data,JSON_UNESCAPED_UNICODE);
    }
   
    /**
     * Get All Data from this method.
     *
     * @return Response
    */
    public function membersTree($parent_key)
    {
        $row1 = [];
        $row = $this->db->query('SELECT section_id, section_name from section WHERE parent_id="'.$parent_key.'"')->result_array();
    
        foreach($row as $key => $value)
        {
           $id = $value['section_id'];
           $row1[$key]['id'] = $value['section_id'];
           $row1[$key]['name'] = $value['section_name'];
           $row1[$key]['text'] = $value['section_name'];
           $row1[$key]['nodes'] = array_values($this->membersTree($value['section_id']));
        }
  
        return $row1;
    }
    public function testtree() {
        $this->load->view('section');
    }
    
//     public function getItem_one_section($section_id=0)
//    {
//          $data = [];
//     
//          $row = $this->db->query('SELECT section_id, section_name from section');
//            
//          if($row->num_rows() > 0)
//          {
//              $data = $this->membersTree(32);
//              
//          }else{
//              $data=["section_id"=>"0","section_name"=>"No Members presnt in list","text"=>"No Members is presnt in list","nodes"=>[]];
//          }
//          $sql="select * from section where parent_id !=0 and section_id  not in (select parent_id from section)";
//          $query=$this->db->query($sql);
//          $data['result']=$query->result();
//   
//          echo json_encode($data,JSON_UNESCAPED_UNICODE);
//    }
//   
//    /**
//     * Get All Data from this method.
//     *
//     * @return Response
//    */
//    public function membersTree_one_section($parent_key)
//    {
//        $row1 = [];
//        $row = $this->db->query('SELECT section_id, section_name from section WHERE parent_id="'.$parent_key.'"')->result_array();
//    
//        foreach($row as $key => $value)
//        {
//           $id = $value['section_id'];
//           $row1[$key]['id'] = $value['section_id'];
//           $row1[$key]['name'] = $value['section_name'];
//           $row1[$key]['text'] = $value['section_name'];
//           $row1[$key]['nodes'] = array_values($this->membersTree($value['section_id']));
//        }
//  
//        return $row1;
//    }

    
    
    
    
}
