<?php

/*
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Section extends Front_end {

    function __construct() {
        parent::__construct();
        $this->load->model('Section_model');
    }

    /*
     * Listing of section
     */

    function index() {
        $data['section'] = $this->Section_model->get_parent_name();

        $this->layout->view('section/index', $data);
    }

    /*
     * Adding a new section
     */

    function add() {
        if (isset($_POST) && count($_POST) > 0) {
            $params = array(
                'section_name' => $this->input->post('section_name'),
                'parent_id' => $this->input->post('parent_section_id'),
            );

            $section_id = $this->Section_model->add_section($params);
            redirect('section/index');
        } else {
            $data['get_all_section'] = $this->Section_model->get_all_section();
            $this->layout->view('section/add', $data);
        }
    }

    /*
     * Editing a section
     */

    function edit($section_id) {
        // check if the section exists before trying to edit it
        $data['section'] = $this->Section_model->get_section($section_id);

        if (isset($data['section']['section_id'])) {
            if (isset($_POST) && count($_POST) > 0) {
                $params = array(
                    'section_name' => $this->input->post('section_name'),
                    'parent_id' => $this->input->post('parent_section_id'),
                );

                $this->Section_model->update_section($section_id, $params);
                redirect('section/index');
            } else {
                $data['get_all_section'] = $this->Section_model->get_all_section();
                $this->layout->view('section/edit', $data);
            }
        } else
            show_error('The section you are trying to edit does not exist.');
    }

    /*
     * Deleting section
     */

    function remove($section_id) {
        $section = $this->Section_model->get_section($section_id);

        // check if the section exists before trying to delete it
        if (isset($section['section_id'])) {
            $this->Section_model->delete_section($section_id);
            redirect('section/index');
        } else
            show_error('The section you are trying to delete does not exist.');
    }

    public function getItem($parent_key = '0') {
        $data = [];

        $row = $this->db->query('SELECT section_id, section_name from section');

        if ($row->num_rows() > 0) {
            $data = $this->membersTree($parent_key);
        } else {
            $data = ["section_id" => "0", "section_name" => "No Members presnt in list", "text" => "No Members is presnt in list", "nodes" => []];
        }
        $sql = "select * from section where parent_id !=0 and section_id  not in (select parent_id from section)";
        $query = $this->db->query($sql);
        $data['result'] = $query->result();
//        if ($parent_key == 32) {
//            $data['system'] = $data = $this->membersTree($parent_key);
//        }


        echo json_encode($data, JSON_UNESCAPED_UNICODE);
    }

    /**
     * Get All Data from this method.
     *
     * @return Response
     */
    public function membersTree($parent_key) {
        $row1 = [];
        $row = $this->db->query('SELECT section_id, section_name from section WHERE parent_id="' . $parent_key . '"')->result_array();
        $row2 = $this->db->query('SELECT section.section_id, section.section_name,book.section_id,book.file  from section,book 
             WHERE section.section_id=book.section_id')->result_array();
        foreach ($row as $key => $value) {
            
            
            $id = $value['section_id'];
              $row1[$key]['id'] = $value['section_id'];
            $row1[$key]['name'] = $value['section_name'];
            $row1[$key]['text'] = $value['section_name'];
            $sql="select * from book where  section_id='".$value['section_id']."'";
            $query=$this->db->query($sql);
            $result=$query->result();
            $count=0;
            foreach ($result as $v) {
                $count++;
                if($v->book_id !== 0){
                    
                    $row1[$key]['text'] = '<span style="color:red;">'.$value['section_name'].'</span><span  class="numberCircle">'.$count.'</span>';
                    
                }
            }
            
          
            
            // $row1[$key]['file'] = $value['section_name'];
            $row1[$key]['nodes'] = array_values($this->membersTree($value['section_id']));
        }

        return $row1;
    }

    public function case_law() {

        $this->layout->view('main_sections/case_law');
    }

    public function saudi_regulations() {


        $parent_id = $this->input->get('section_id');

        $data['result1'] = $this->Section_model->get_section_via_parent($parent_id);
        $this->layout->view('main_sections/saudi_regulations', $data);
    }

    public function models_and_contracts() {

        $this->layout->view('main_sections/models_and_contracts');
    }

    public function searches_law_books() {

        $this->layout->view('main_sections/searches_law_books');
    }

    public function testtree() {
        $this->load->view('section');
    }

    public function get_all_parent_sections_from_child_section($childsectionID) {
        $sql = "SELECT c.*
    FROM (
        SELECT
            @r AS _id,
            (SELECT @r := parent_id FROM section WHERE id = _id) AS parent_id,
            @l := @l + 1 AS level
        FROM
            (SELECT @r := " . $childsectionID . ", @l := 0) vars, section m
        WHERE @r <> 0) d
    JOIN section c
    ON d._id = c.id";
    }

    function get_last_node_each_main_section($parent_id) {
        $data = [];

        $row = $this->db->query('SELECT section_id, section_name from section');

        if ($row->num_rows() > 0) {
            $data = $this->membersTree($parent_id);
        } else {
            $data = ["section_id" => "0", "section_name" => "No Members presnt in list", "text" => "No Members is presnt in list", "nodes" => []];
        }
        $sql = "select * from section where parent_id !=0 and section_id  not in (select parent_id from section)";
        $query = $this->db->query($sql);
        $d = $query->result();
    }



    public function getItem_2() {

        $parent_key = 33;
        $data = [];

        $row = $this->db->query('SELECT section_id, section_name from section');

        if ($row->num_rows() > 0) {
            $data = $this->membersTree_2($parent_key);
        } else {
            $data = ["section_id" => "0", "section_name" => "No Members presnt in list", "text" => "No Members is presnt in list", "nodes" => []];
        }
        $sql = "select * from section where parent_id !=0 and section_id  not in (select parent_id from section)";
        $query = $this->db->query($sql);
        $data2 = $query->result();

       print_r($data) ;
      
    }
    
       public function membersTree_2($parent_key) {
        $row1 = [];
        $row = $this->db->query('SELECT section_id, section_name from section WHERE parent_id="' . $parent_key . '"')->result_array();
        $row2 = $this->db->query('SELECT section.section_id, section.section_name,book.section_id,book.file  from section,book 
             WHERE section.section_id=book.section_id')->result_array();
        foreach ($row as $key => $value) {
            $id = $value['section_id'];
            $row1[$key]['id'] = $value['section_id'];
            $row1[$key]['name'] = $value['section_name'];
            $row1[$key]['text'] = $value['section_name'];
            // $row1[$key]['file'] = $value['section_name'];
            $row1[$key]['nodes'] = array_values($this->membersTree($value['section_id']));
        }

        return $row1;
    }
    
    

}
